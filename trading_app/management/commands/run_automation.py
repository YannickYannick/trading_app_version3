from django.core.management.base import BaseCommand
from django.utils import timezone
from django.contrib.auth.models import User
from trading_app.models import AutomationConfig
from trading_app.automation_service import AutomationService
import logging

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = 'Ex√©cute le cycle d\'automatisation pour tous les utilisateurs actifs'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--user',
            type=str,
            help='Nom d\'utilisateur sp√©cifique pour ex√©cuter l\'automatisation'
        )
        parser.add_argument(
            '--force',
            action='store_true',
            help='Forcer l\'ex√©cution m√™me si l\'automatisation est inactive'
        )
    
    def handle(self, *args, **options):
        start_time = timezone.now()
        self.stdout.write(f"üöÄ D√©but de l'ex√©cution de l'automatisation √† {start_time}")
        
        # R√©cup√©rer les utilisateurs √† traiter
        if options['user']:
            try:
                users = [User.objects.get(username=options['user'])]
                self.stdout.write(f"üë§ Ex√©cution pour l'utilisateur: {options['user']}")
            except User.DoesNotExist:
                self.stdout.write(self.style.ERROR(f"‚ùå Utilisateur {options['user']} non trouv√©"))
                return
        else:
            # Tous les utilisateurs avec automatisation active
            active_configs = AutomationConfig.objects.filter(is_active=True)
            users = [config.user for config in active_configs]
            self.stdout.write(f"üë• {len(users)} utilisateurs avec automatisation active trouv√©s")
        
        if not users:
            self.stdout.write(self.style.WARNING("‚ö†Ô∏è Aucun utilisateur √† traiter"))
            return
        
        # Ex√©cuter l'automatisation pour chaque utilisateur
        success_count = 0
        error_count = 0
        
        for user in users:
            try:
                self.stdout.write(f"üîÑ Traitement de l'utilisateur: {user.username}")
                
                # V√©rifier si l'automatisation est active (sauf si --force)
                if not options['force']:
                    config = AutomationConfig.objects.filter(user=user).first()
                    if not config or not config.is_active:
                        self.stdout.write(f"‚è≠Ô∏è Automatisation inactive pour {user.username}, ignor√©")
                        continue
                
                # Ex√©cuter le cycle d'automatisation
                automation_service = AutomationService(user)
                results = automation_service.execute_automation_cycle()
                
                # Afficher les r√©sultats
                status_emoji = "‚úÖ" if results['status'] == 'SUCCESS' else "‚ö†Ô∏è" if results['status'] == 'PARTIAL' else "‚ùå"
                self.stdout.write(f"{status_emoji} {user.username}: {results['status']}")
                
                if results['summary']:
                    for summary in results['summary']:
                        self.stdout.write(f"   {summary}")
                
                if results['errors']:
                    for error in results['errors']:
                        self.stdout.write(self.style.ERROR(f"   ‚ùå {error}"))
                
                success_count += 1
                
            except Exception as e:
                error_count += 1
                self.stdout.write(self.style.ERROR(f"‚ùå Erreur pour {user.username}: {str(e)}"))
                logger.error(f"Erreur automatisation pour {user.username}: {str(e)}", exc_info=True)
                continue
        
        # R√©sum√© final
        end_time = timezone.now()
        duration = end_time - start_time
        
        self.stdout.write("\n" + "="*50)
        self.stdout.write(f"üìä R√âSUM√â DE L'EX√âCUTION")
        self.stdout.write(f"‚è±Ô∏è  Dur√©e totale: {duration}")
        self.stdout.write(f"‚úÖ Succ√®s: {success_count}")
        self.stdout.write(f"‚ùå Erreurs: {error_count}")
        self.stdout.write(f"üë• Utilisateurs trait√©s: {len(users)}")
        self.stdout.write("="*50)
        
        if error_count == 0:
            self.stdout.write(self.style.SUCCESS("üéâ Toutes les automatisations ont √©t√© ex√©cut√©es avec succ√®s !"))
        elif success_count > 0:
            self.stdout.write(self.style.WARNING("‚ö†Ô∏è Certaines automatisations ont √©chou√©"))
        else:
            self.stdout.write(self.style.ERROR("‚ùå Toutes les automatisations ont √©chou√©"))
