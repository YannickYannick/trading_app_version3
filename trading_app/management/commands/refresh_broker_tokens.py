from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from trading_app.models import BrokerCredentials
from trading_app.services import BrokerService
from trading_app.telegram_notifications import TelegramNotifier
import logging

logger = logging.getLogger(__name__)
User = get_user_model()

class Command(BaseCommand):
    help = 'Rafra√Æchir automatiquement les tokens des brokers Saxo'

    def add_arguments(self, parser):
        parser.add_argument(
            '--user',
            type=str,
            help='Nom d\'utilisateur sp√©cifique (optionnel)'
        )
        parser.add_argument(
            '--broker',
            type=str,
            choices=['saxo', 'binance', 'all'],
            default='all',
            help='Type de broker √† rafra√Æchir'
        )
        parser.add_argument(
            '--force',
            action='store_true',
            help='Forcer le refresh m√™me si le token n\'est pas expir√©'
        )

    def handle(self, *args, **options):
        self.stdout.write("üîÑ D√©marrage du refresh automatique des tokens...")
        
        # R√©cup√©rer les utilisateurs
        if options['user']:
            try:
                users = [User.objects.get(username=options['user'])]
                self.stdout.write(f"üë§ Utilisateur sp√©cifique: {options['user']}")
            except User.DoesNotExist:
                self.stdout.write(self.style.ERROR(f"‚ùå Utilisateur {options['user']} non trouv√©"))
                return
        else:
            users = User.objects.filter(is_active=True)
            self.stdout.write(f"üë• {users.count()} utilisateurs actifs trouv√©s")

        # Filtrer par type de broker
        broker_type = options['broker']
        
        total_refreshed = 0
        total_errors = 0
        
        for user in users:
            self.stdout.write(f"\nüîç Traitement de l'utilisateur: {user.username}")
            
            # R√©cup√©rer les credentials du broker
            if broker_type == 'all':
                credentials = BrokerCredentials.objects.filter(
                    user=user,
                    broker_type__in=['saxo', 'binance']
                )
            else:
                credentials = BrokerCredentials.objects.filter(
                    user=user,
                    broker_type=broker_type
                )
            
            if not credentials.exists():
                self.stdout.write(f"‚ö†Ô∏è Aucun credential {broker_type} trouv√© pour {user.username}")
                continue
            
            for cred in credentials:
                try:
                    self.stdout.write(f"  üîë Broker: {cred.broker_type}")
                    
                    if cred.broker_type == 'saxo':
                        success = self._refresh_saxo_tokens(user, cred, options['force'])
                    elif cred.broker_type == 'binance':
                        success = self._refresh_binance_tokens(user, cred, options['force'])
                    else:
                        self.stdout.write(f"    ‚ö†Ô∏è Type de broker non support√©: {cred.broker_type}")
                        continue
                    
                    if success:
                        total_refreshed += 1
                        self.stdout.write(self.style.SUCCESS(f"    ‚úÖ Refresh r√©ussi"))
                    else:
                        total_errors += 1
                        self.stdout.write(self.style.ERROR(f"    ‚ùå Refresh √©chou√©"))
                        
                except Exception as e:
                    total_errors += 1
                    self.stdout.write(self.style.ERROR(f"    ‚ùå Erreur: {str(e)}"))
                    logger.error(f"Erreur refresh tokens pour {user.username} - {cred.broker_type}: {e}")

        # R√©sum√© final
        self.stdout.write(f"\nüìä R√©sum√© du refresh automatique:")
        self.stdout.write(f"  ‚úÖ Tokens rafra√Æchis: {total_refreshed}")
        self.stdout.write(f"  ‚ùå Erreurs: {total_errors}")
        
        # Notification Telegram si configur√©e
        try:
            notifier = TelegramNotifier()
            if total_refreshed > 0 or total_errors > 0:
                message = f"üîÑ Refresh automatique des tokens termin√©\n"
                message += f"‚úÖ Succ√®s: {total_refreshed}\n"
                message += f"‚ùå Erreurs: {total_errors}"
                notifier.send_notification(message)
        except Exception as e:
            self.stdout.write(f"‚ö†Ô∏è Erreur notification Telegram: {e}")

    def _refresh_saxo_tokens(self, user, cred, force=False):
        """Rafra√Æchir les tokens Saxo"""
        try:
            broker_service = BrokerService(user)
            
            # V√©rifier si le refresh est n√©cessaire
            if not force and not broker_service._should_refresh_saxo_tokens(cred):
                self.stdout.write(f"    ‚ÑπÔ∏è Refresh non n√©cessaire pour {user.username}")
                return True
            
            # Tenter le refresh
            success = broker_service.refresh_saxo_tokens(cred)
            
            if success:
                self.stdout.write(f"    üîÑ Tokens Saxo rafra√Æchis pour {user.username}")
            else:
                self.stdout.write(f"    ‚ùå √âchec refresh tokens Saxo pour {user.username}")
            
            return success
            
        except Exception as e:
            self.stdout.write(f"    ‚ùå Erreur refresh Saxo: {e}")
            return False

    def _refresh_binance_tokens(self, user, cred, force=False):
        """Rafra√Æchir les tokens Binance (si applicable)"""
        try:
            # Pour Binance, on v√©rifie juste la validit√© des cl√©s
            broker_service = BrokerService(user)
            
            # Test de connectivit√©
            success = broker_service.test_binance_connection(cred)
            
            if success:
                self.stdout.write(f"    ‚úÖ Connexion Binance OK pour {user.username}")
            else:
                self.stdout.write(f"    ‚ùå Connexion Binance √©chou√©e pour {user.username}")
            
            return success
            
        except Exception as e:
            self.stdout.write(f"    ‚ùå Erreur test Binance: {e}")
            return False
