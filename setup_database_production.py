#!/usr/bin/env python
"""
Script de configuration de la base de donn√©es pour la production
R√©sout le probl√®me "no such table" en appliquant toutes les migrations n√©cessaires
"""

import os
import sys
import django
from pathlib import Path

def setup_django(settings_module=None):
    """Configure Django pour utiliser les param√®tres sp√©cifi√©s"""
    # D√©finir le module de param√®tres
    if settings_module:
        os.environ['DJANGO_SETTINGS_MODULE'] = settings_module
    else:
        # D√©tecter automatiquement l'environnement
        if 'production_test' in sys.argv or '--production-test' in sys.argv:
            os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'site_trading_v3.settings.production_test')
            print("üîß Mode: Production Test (db_test_3.sqlite3)")
        else:
            os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'site_trading_v3.settings.production')
            print("üîß Mode: Production (db_test_4.sqlite3)")
    
    # Configurer Django
    django.setup()

def run_migrations():
    """Applique toutes les migrations Django"""
    print("üóÑÔ∏è  Application des migrations Django...")
    
    from django.core.management import execute_from_command_line
    
    # Liste des applications avec leurs migrations
    apps_to_migrate = [
        'auth',           # Django auth system
        'contenttypes',   # Django content types
        'sessions',       # Django sessions
        'admin',          # Django admin
        'trading_app',    # Notre app principale
        'bachata_app',    # App bachata
        'cocktails_app',  # App cocktails
        'cocktails_v2_app', # App cocktails v2
    ]
    
    try:
        # Appliquer les migrations pour chaque app
        for app in apps_to_migrate:
            print(f"   üìã Migration de {app}...")
            try:
                execute_from_command_line(['manage.py', 'migrate', app])
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Erreur lors de la migration de {app}: {e}")
                # Continuer avec les autres apps
        
        # Migration g√©n√©rale pour tout ce qui reste
        print("   üìã Migration g√©n√©rale...")
        execute_from_command_line(['manage.py', 'migrate'])
        
        print("‚úÖ Toutes les migrations ont √©t√© appliqu√©es avec succ√®s !")
        
    except Exception as e:
        print(f"‚ùå Erreur lors des migrations: {e}")
        return False
    
    return True

def create_superuser():
    """Cr√©e un superutilisateur si n√©cessaire"""
    print("üë§ V√©rification du superutilisateur...")
    
    try:
        from django.contrib.auth.models import User
        
        if not User.objects.filter(is_superuser=True).exists():
            # Cr√©er un superutilisateur par d√©faut
            User.objects.create_superuser(
                username='admin',
                email='admin@example.com',
                password='changeme123'
            )
            print("‚úÖ Superutilisateur cr√©√©: admin/changeme123")
            print("‚ö†Ô∏è  IMPORTANT: Changez ce mot de passe d√®s que possible !")
        else:
            print("‚úÖ Superutilisateur existe d√©j√†")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation du superutilisateur: {e}")

def verify_database():
    """V√©rifie que les tables ont √©t√© cr√©√©es correctement"""
    print("üîç V√©rification de la base de donn√©es...")
    
    try:
        from trading_app.models import Asset, AllAssets, AssetTradable, BrokerCredentials
        
        # Tester l'acc√®s aux mod√®les principaux
        models_to_test = [
            ('Asset', Asset),
            ('AllAssets', AllAssets),
            ('AssetTradable', AssetTradable),
            ('BrokerCredentials', BrokerCredentials),
        ]
        
        for model_name, model_class in models_to_test:
            try:
                count = model_class.objects.count()
                print(f"   ‚úÖ Table {model_name}: {count} enregistrements")
            except Exception as e:
                print(f"   ‚ùå Erreur avec la table {model_name}: {e}")
                return False
        
        print("‚úÖ Toutes les tables sont accessibles !")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")
        return False

def main():
    """Fonction principale"""
    print("üöÄ Configuration de la base de donn√©es pour la production")
    print("=" * 60)
    
    # V√©rifier que nous sommes dans le bon r√©pertoire
    if not Path('manage.py').exists():
        print("‚ùå Erreur: manage.py non trouv√©. Ex√©cutez ce script depuis la racine du projet.")
        sys.exit(1)
    
    try:
        # 1. Configurer Django
        print("‚öôÔ∏è  Configuration de Django...")
        setup_django()
        print("‚úÖ Django configur√©")
        
        # 2. Appliquer les migrations
        if not run_migrations():
            print("‚ùå √âchec des migrations")
            sys.exit(1)
        
        # 3. Cr√©er un superutilisateur si n√©cessaire
        create_superuser()
        
        # 4. V√©rifier la base de donn√©es
        if not verify_database():
            print("‚ùå V√©rification de la base de donn√©es √©chou√©e")
            sys.exit(1)
        
        print("\nüéâ Configuration termin√©e avec succ√®s !")
        print("=" * 60)
        print("üìù Prochaines √©tapes:")
        print("   1. Connectez-vous √† l'admin Django (/admin/)")
        print("   2. Changez le mot de passe admin")
        print("   3. Configurez vos credentials de broker")
        print("   4. Importez vos donn√©es d'assets si n√©cessaire")
        
    except Exception as e:
        print(f"‚ùå Erreur fatale: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()
