#!/usr/bin/env python3
"""
Script de test pour v√©rifier la gestion des tokens Saxo (incluant tokens 24h)
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'site_trading_v3.settings.development')
django.setup()

from django.contrib.auth.models import User
from trading_app.models import BrokerCredentials
from trading_app.services import BrokerService

def test_saxo_tokens():
    """Test de la gestion des tokens Saxo"""
    print("=== TEST GESTION TOKENS SAXO ===")
    
    # R√©cup√©rer le premier utilisateur
    try:
        user = User.objects.first()
        if not user:
            print("‚ùå Aucun utilisateur trouv√©")
            return
        
        print(f"üë§ Utilisateur: {user.username}")
        
        # R√©cup√©rer les credentials Saxo
        broker_creds = BrokerCredentials.objects.filter(
            user=user, 
            broker_type='saxo',
            is_active=True
        ).first()
        
        if not broker_creds:
            print("‚ùå Aucune configuration Saxo trouv√©e")
            return
        
        print(f"üè¶ Configuration Saxo: {broker_creds.name}")
        print(f"   Client ID: {broker_creds.saxo_client_id}")
        print(f"   Access Token: {'‚úÖ Pr√©sent' if broker_creds.saxo_access_token else '‚ùå Absent'}")
        print(f"   Refresh Token: {'‚úÖ Pr√©sent' if broker_creds.saxo_refresh_token else '‚ùå Absent'}")
        print(f"   Expire le: {broker_creds.saxo_token_expires_at}")
        
        # Test du service
        broker_service = BrokerService(user)
        broker = broker_service.get_broker_instance(broker_creds)
        
        print(f"\nüîß Instance broker cr√©√©e: {type(broker)}")
        print(f"   Access Token dans broker: {'‚úÖ Pr√©sent' if broker.access_token else '‚ùå Absent'}")
        print(f"   Refresh Token dans broker: {'‚úÖ Pr√©sent' if broker.refresh_token else '‚ùå Absent'}")
        
        # Test de d√©tection token 24h
        if hasattr(broker, 'is_24h_token'):
            is_24h = broker.is_24h_token()
            print(f"   Token 24h d√©tect√©: {'‚úÖ Oui' if is_24h else '‚ùå Non'}")
            
            if is_24h:
                print("üîë Configuration token 24h d√©tect√©e")
                print("   ‚Üí Le syst√®me √©vitera les tentatives de refresh automatique")
        
        # Test d'authentification
        print(f"\nüîê Test d'authentification...")
        is_auth = broker.authenticate()
        print(f"   Authentifi√©: {'‚úÖ Oui' if is_auth else '‚ùå Non'}")
        
        if is_auth:
            print("‚úÖ Les tokens sont valides !")
            
            # Test de r√©cup√©ration de donn√©es
            print(f"\nüìä Test de r√©cup√©ration de donn√©es...")
            try:
                accounts = broker.get_accounts()
                print(f"   Comptes r√©cup√©r√©s: {len(accounts)}")
                
                positions = broker.get_positions()
                print(f"   Positions r√©cup√©r√©es: {len(positions)}")
                
                print("‚úÖ R√©cup√©ration de donn√©es r√©ussie !")
            except Exception as e:
                print(f"‚ùå Erreur lors de la r√©cup√©ration: {e}")
        else:
            print("‚ùå Les tokens ne sont pas valides ou manquants")
            print("üí° Vous pouvez :")
            print("   1. Saisir manuellement les tokens dans la configuration")
            print("   2. Utiliser le flux OAuth2 via l'interface web")
            print("   3. Pour un token 24h: mettre le m√™me token dans access_token et refresh_token")
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")

def test_24h_token_simulation():
    """Simulation d'un token 24h"""
    print("\n=== SIMULATION TOKEN 24H ===")
    
    try:
        user = User.objects.first()
        if not user:
            print("‚ùå Aucun utilisateur trouv√©")
            return
        
        # Cr√©er une instance broker avec un token 24h simul√©
        from trading_app.brokers.saxo import SaxoBroker
        
        # Token 24h simul√© (format JWT typique)
        fake_24h_token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        
        credentials = {
            'client_id': 'test_client',
            'client_secret': 'test_secret',
            'redirect_uri': 'http://localhost:8080/callback',
            'access_token': fake_24h_token,
            'refresh_token': fake_24h_token,  # M√™me token pour simuler un 24h
        }
        
        broker = SaxoBroker(user, credentials)
        
        print(f"üîß Broker cr√©√© avec token 24h simul√©")
        print(f"   Token 24h d√©tect√©: {'‚úÖ Oui' if broker.is_24h_token() else '‚ùå Non'}")
        
        # Test d'authentification
        is_auth = broker.authenticate()
        print(f"   Authentification: {'‚úÖ R√©ussie' if is_auth else '‚ùå √âchou√©e'}")
        
        if is_auth:
            print("‚úÖ Le token 24h est correctement g√©r√© !")
        else:
            print("‚ùå Probl√®me avec la gestion du token 24h")
            
    except Exception as e:
        print(f"‚ùå Erreur simulation: {e}")

if __name__ == "__main__":
    test_saxo_tokens()
    test_24h_token_simulation() 